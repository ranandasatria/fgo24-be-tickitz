basePath: /
definitions:
  dto.Actor:
    properties:
      actorName:
        type: string
    required:
    - actorName
    type: object
  dto.AuthRegisterLogin:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.CreatePaymentMethodRequest:
    properties:
      paymentName:
        type: string
    required:
    - paymentName
    type: object
  dto.CreateTransactionRequest:
    properties:
      cinema:
        type: string
      location:
        type: string
      movie_id:
        type: integer
      payment_method:
        type: integer
      price_per_seat:
        type: integer
      seats:
        items:
          type: string
        type: array
      show_date:
        type: string
      show_time:
        type: string
    type: object
  dto.Director:
    properties:
      directorName:
        type: string
    required:
    - directorName
    type: object
  dto.Genre:
    properties:
      genreName:
        type: string
    type: object
  dto.Movie:
    properties:
      ReleaseDate:
        type: string
      castIDs:
        items:
          type: integer
        type: array
      description:
        type: string
      directorIDs:
        items:
          type: integer
        type: array
      duration:
        type: integer
      genreIDs:
        items:
          type: integer
        type: array
      horizontal_image:
        type: string
      image:
        type: string
      title:
        type: string
    type: object
  dto.UpdateMovieInput:
    properties:
      castIDs:
        items:
          type: integer
        type: array
      description:
        type: string
      directorIDs:
        items:
          type: integer
        type: array
      duration:
        type: integer
      genreIDs:
        items:
          type: integer
        type: array
      horizontalImage:
        type: string
      image:
        type: string
      releaseDate:
        type: string
      title:
        type: string
    type: object
  dto.UpdateProfileRequest:
    properties:
      fullName:
        type: string
      newPassword:
        type: string
      oldPassword:
        type: string
      phoneNumber:
        type: string
      profilePicture:
        type: string
    type: object
  utils.Response:
    properties:
      error: {}
      message:
        type: string
      results: {}
      success:
        type: boolean
    type: object
host: localhost:8888
info:
  contact: {}
  description: This is a simple movie ticketing API
  title: Be-Tickitz API
  version: "1.0"
paths:
  /actors:
    get:
      description: Retrieve all actors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all actors
      tags:
      - Actors
  /admin/actors:
    post:
      consumes:
      - application/json
      description: Admin only. Add a new actor
      parameters:
      - description: Actor data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.Actor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create actor
      tags:
      - Actors
  /admin/actors/{id}:
    delete:
      description: Admin only. Delete a actor by ID
      parameters:
      - description: Actor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a actor
      tags:
      - Actors
  /admin/directors:
    post:
      consumes:
      - application/json
      description: Admin only. Add a new director
      parameters:
      - description: Director data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.Director'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create director
      tags:
      - Directors
  /admin/directors/{id}:
    delete:
      description: Admin only. Delete a director by ID
      parameters:
      - description: Director ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a director
      tags:
      - Directors
  /admin/genres:
    post:
      consumes:
      - application/json
      description: Admin only. Add a new genre
      parameters:
      - description: Genre name
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.Genre'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create genre
      tags:
      - Genres
  /admin/genres/{id}:
    delete:
      description: Admin only. Delete a genre by ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a genre
      tags:
      - Genres
  /admin/movies:
    post:
      consumes:
      - application/json
      description: Admin only. Add a new movie with metadata and relations
      parameters:
      - description: Movie data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create new movie
      tags:
      - Movies
  /admin/movies/{id}:
    delete:
      description: Admin only. Delete a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - Movies
    patch:
      consumes:
      - application/json
      description: Admin only. Update movie details and relations
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update movie data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMovieInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update a movie
      tags:
      - Movies
  /admin/payment-method:
    get:
      description: Retrieve all payment method
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all payment method
      tags:
      - Payment Method
    post:
      consumes:
      - application/json
      description: Admin only. Add new payment method
      parameters:
      - description: Payment method name
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePaymentMethodRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create payment method
      tags:
      - Payment Method
  /admin/payment-method/{id}:
    delete:
      description: Admin only. Delete a payment method by ID
      parameters:
      - description: Payment Method ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a payment method
      tags:
      - Payment Method
  /admin/transactions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all transactions (admin only)
      tags:
      - Transactions
  /admin/users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete user by ID (admin only)
      tags:
      - Users
  /directors:
    get:
      description: Retrieve all directors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all directors
      tags:
      - Directors
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Send reset token to user's email if email is valid
      parameters:
      - description: User email
        in: body
        name: request
        required: true
        schema:
          properties:
            email:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Send password reset token
      tags:
      - Auth
  /genres:
    get:
      description: Retrieve all available genres
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all genres
      tags:
      - Genres
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRegisterLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Login user
      tags:
      - Auth
  /movies:
    get:
      description: View all movies in database
      parameters:
      - description: Search keyword
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all movies
      tags:
      - Movies
  /movies/{id}:
    get:
      description: Retrieve movie details by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get movie by ID
      tags:
      - Movies
  /movies/now-showing:
    get:
      description: Retrieve list of currently showing movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get now showing movies
      tags:
      - Movies
  /movies/upcoming:
    get:
      description: Retrieve list of upcoming movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get upcoming movies
      tags:
      - Movies
  /profile:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get profile detail
      tags:
      - Profile
    patch:
      consumes:
      - application/json
      parameters:
      - description: Update profile data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Edit profile (and optionally change password)
      tags:
      - Profile
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRegisterLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register a new user
      tags:
      - Auth
  /reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using valid reset token
      parameters:
      - description: Reset password data
        in: body
        name: request
        required: true
        schema:
          properties:
            newPassword:
              type: string
            token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Reset user password
      tags:
      - Auth
  /transactions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get transactions per user
      tags:
      - Transactions
    post:
      consumes:
      - application/json
      description: Book seats and create a new transaction
      parameters:
      - description: Transaction request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Create a new transaction
      tags:
      - Transactions
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all users (admin only)
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
